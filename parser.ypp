%{
/*
 * parser.ypp
 * Copyright (C) 2016 Nemanja Mićović <nmicovic@outlook.com>
 *
 * Distributed under terms of the MIT license.
 */

#include <iostream>
#include <vector>
#include <cstdlib>
#include <string>

#include "Expression.hpp"
#include "Statement.hpp"
#include "LLVMCodegen.hpp"
#include "Types.hpp"
#include "ProgramOptions.hpp"
#include "GlobalContainers.hpp"
#include "SemanticAnalyzer.hpp"
#include "color.h"

#define YYDEBUG 1

extern unsigned long long int ProgramLineCounter;

/*extern std::map<std::string, vlang::VLANG_TYPE> FunctionReturnType;*/

int yylex();
void yyerror(std::string err_msg) {
    std::cerr << err_msg << std::endl;
    exit(EXIT_FAILURE);
}

void syntax_error(std::string err_msg) {
    std::string fileName = vlang::util::ProgramOptions::get().first_input_file();
    std::cerr << fileName << ":" << ProgramLineCounter << ":" << BOLDRED << "error: " << RESET;
    std::cerr << err_msg << std::endl;
}

std::vector<vlang::StmtAST*>* ParsedProgram;

%}

/* Types */
%token int_ty_tok double_ty_tok string_ty_tok void_ty_tok bool_ty_tok
/* Methods */
%token stdout_printf_tok
/* Keywords */
%token return_tok for_tok while_tok if_tok else_tok
/* Operators */
%token GTE_tok LTE_tok EQ_tok NEQ_tok

%union {
    // Constants
    int int_val;
    double double_val;
    std::string* str_val;
    bool bool_val;

    // Statements
    vlang::StmtAST* stmt;
    std::vector<vlang::StmtAST*>* vec_stmt;

    // Expressions
    vlang::ExprAST* expr;
    std::vector<vlang::ExprAST*>* vec_expr;

    // Functions
    vlang::PrototypeAST* proto;
    vlang::FunctionAST* fun;

    // Other
    std::vector<std::pair<vlang::VLANG_TYPE, std::string> >* vec_pair_type_name;
    std::pair<vlang::VLANG_TYPE, std::string>* pair_type_name;

    std::pair<std::string, vlang::ExprAST*>* pair_str_expr;
    std::vector<std::pair<std::string, vlang::ExprAST*>>* vec_pair_str_expr;
    std::vector<std::string>* vec_str;
    vlang::VLANG_TYPE vtype;
}

%nonassoc else_tok
%left '='
%left '>' '<' GTE_tok LTE_tok EQ_tok NEQ_tok
%left '+' '-' '%'
%left '*' '/'

%token <int_val> int_val_tok
%token <bool_val> bool_val_tok
%token <double_val> double_val_tok
%token <str_val> str_val_tok id_tok

%type <expr> Expr

%type <proto> FunDeclaration
%type <fun> FunDefinition

%type <vtype> VlangType

%type <pair_type_name> Arg
%type <vec_pair_type_name> ArgList

%type <pair_str_expr> Assignment
%type <vec_pair_str_expr> Assignments

%type <vec_stmt> Instructions Program TheProgram
%type <stmt> Instruction Stmt

%type <vec_expr> ExprList

%%
TheProgram: Program {
    ParsedProgram = $1;
}

/* Program is a series of statements. */
Program: Program Stmt {
    $$ = $1;
    if ($2 != nullptr)
        $$->push_back($2);
}
| Stmt {
    $$ = new std::vector<vlang::StmtAST*>();
    if ($1 != nullptr)
        $$->push_back($1);
}
| {
    $$ = new std::vector<vlang::StmtAST*>();
}
;

/* A statement is something like a function declaration,
class creation, enum creation, function definition...*/
Stmt: FunDeclaration ';' {

    bool isValid = true;

    // We try to find the given declaration
    auto finder = vlang::FunctionContainer.find($1->name());
    if (finder == vlang::FunctionContainer.end()) {
        vlang::FunctionContainer.insert(std::pair<std::string, vlang::ProtoDefContainer*>($1->name(), $1));
        /*vlang::FunctionReturnType.insert(std::pair<std::string, vlang::VLANG_TYPE>($1->name(), $1->ret_val_type()));*/
    } else {
        // We report an error
        std::cerr << "Function '" << $1->name() << "' already exists.\n" << finder->second->dump() << std::endl;
        isValid = false;
    }
    if (isValid) {
        $$ = $1;
    } else {
        $$ = nullptr;
    }
}
| FunDefinition {
    bool isValid = true;

    // We check if declaration exists already? If so, we simply replace the pointer (we add the function definition)
    auto finder = vlang::FunctionContainer.find($1->name());
    if (finder != vlang::FunctionContainer.end() && finder->second->stmt_type() == vlang::STMT_TYPE::PROTOTYPE) {
        finder->second = $1;
    } else if (finder != vlang::FunctionContainer.end() && finder->second->stmt_type() == vlang::STMT_TYPE::FUNCTION) {
        // We check if an definition already exists and fail adding
        std::cerr << "Function '" << $1->name() << "' is already defined!" << std::endl;
        isValid = false;
    } else {
        // we add it inside map
        vlang::FunctionContainer.insert(std::pair<std::string, vlang::ProtoDefContainer*>($1->name(), $1));
    }

    if (isValid) {
        $$ = $1;
    } else {
        $$ = nullptr;
    }
}
;

/* A function declaration */
FunDeclaration: VlangType id_tok '(' ArgList ')' {
    $$ = new vlang::PrototypeAST(*$2, $1, *$4, ProgramLineCounter);
    delete $2;
    delete $4;
}
;

/* A function definition */
FunDefinition: FunDeclaration '{' Instructions '}' {
    $$ = new vlang::FunctionAST(*$1, new vlang::BlockStmtAST(*$3, ProgramLineCounter), ProgramLineCounter);
    delete $1;
    delete $3;
}
;

/* A chain of instructions */
Instructions: Instructions Instruction {
    $$ = $1;
    $$->push_back($2);
}
| Instruction {
    $$ = new std::vector<vlang::StmtAST*>();
    $$->push_back($1);
}
;

/* Instruction is what we write inside functions like function call,
return, expression evaluation etc. */
Instruction: return_tok Expr ';' {
    $$ = new vlang::ReturnStmtAST($2, ProgramLineCounter);
}
| Expr ';' {
    $$ = new vlang::ExpressionStmtAST($1, ProgramLineCounter);
}
| id_tok '=' Expr ';' {
    $$ = new vlang::AssignmentStmtAST(vlang::GetVariableType(*$1), *$1, $3, ProgramLineCounter);
    delete $1;
}
/* Changed with Assignments (more abstract)
| VlangType id_tok '=' Expr ';' {
    $$ = new vlang::AssignmentStmtAST($1, *$2, $4);
    delete $2;
}
*/
| VlangType Assignments ';' {
    $$ = new vlang::AssignmentListStmtAST($1, *$2, ProgramLineCounter);
    for (auto & a : *$2) {
        vlang::RegisterVariable(a.first, $1);
    }
    delete $2;
}
/*| Assignments ';' {*/
    /*$$ = new vlang::AssignmentListStmtAST(vlang::VLANG_TYPE::NO_VAR_DECL, *$1);*/
    /*delete $1;*/
/*}*/
| if_tok '(' Expr ')' Instruction {
    $$ = new vlang::IfStmtAST($3, $5, ProgramLineCounter);
}
| if_tok '(' Expr ')' Instruction else_tok Instruction {
    $$ = new vlang::IfElseStmtAST($3, $5, $7, ProgramLineCounter);
}
| while_tok '(' Expr ')' Instruction {
    $$ = new vlang::WhileStmtAST($3, $5, ProgramLineCounter);
}
| '{' Instructions '}' {
    $$ = new vlang::BlockStmtAST(*$2, ProgramLineCounter);
    delete $2;
}
| ';' {
    $$ = new vlang::EmptyStmtAST(ProgramLineCounter);
}
;

/* Parsing expressions. */
Expr: '(' Expr ')' {
    $$ = $2;
}
| Expr '+' Expr {
    $$ = new vlang::BinaryExprAST("+", $1, $3);
}
| Expr '-' Expr {
    $$ = new vlang::BinaryExprAST("-", $1, $3);
}
| Expr '*' Expr {
    $$ = new vlang::BinaryExprAST("*", $1, $3);
}
| Expr '/' Expr {
    $$ = new vlang::BinaryExprAST("/", $1, $3);
}
| Expr '%' Expr {
    $$ = new vlang::BinaryExprAST("%", $1, $3);
}
| Expr '<' Expr {
    $$ = new vlang::BinaryExprAST("<", $1, $3);
}
| Expr '>' Expr {
    $$ = new vlang::BinaryExprAST(">", $1, $3);
}
| Expr GTE_tok Expr {
    $$ = new vlang::BinaryExprAST(">=", $1, $3);
}
| Expr LTE_tok Expr {
    $$ = new vlang::BinaryExprAST("<=", $1, $3);
}
| Expr EQ_tok Expr {
    $$ = new vlang::BinaryExprAST("==", $1, $3);
}
| Expr NEQ_tok Expr {
    $$ = new vlang::BinaryExprAST("!=", $1, $3);
}
| int_val_tok {
    $$ = new vlang::ConstIntExprAST($1);
}
| double_val_tok {
    $$ = new vlang::ConstDoubleExprAST($1);
}
| bool_val_tok {
    $$ = new vlang::BoolExprAST($1);
}
| str_val_tok {
    $$ = new vlang::StringExprAST(*$1);
    delete $1;
}
| id_tok {
    std::cerr << *$1 << " type is " << vlang::to_str(vlang::GetVariableType(*$1)) << std::endl;
    $$ = new vlang::VariableExprAST(*$1, vlang::GetVariableType(*$1));
    delete $1;
}
| id_tok '(' ExprList ')' {
    auto finder = vlang::FunctionContainer.find(*$1);
    vlang::VLANG_TYPE type;
    if (finder == vlang::FunctionContainer.end()) {
        type = vlang::VLANG_TYPE::UNKNOWN;
        std::cerr << "Setting unknown_t to " << *$1 << std::endl;
    } else {
        type = finder->second->ret_val_type();
        /*std::cerr << "Setting " << vlang::to_str(type) << " to " << *$1 << std::endl;*/
    }
    $$ = new vlang::FunctionCallExprAST(*$1, *$3, type);
    delete $1;
    delete $3;
}
/*
| error {
    syntax_error("Unknown expression.");
}
*/
;

/* List of expressions with separator ',' */
ExprList: ExprList ',' Expr {
    $$ = $1;
    $$->push_back($3);
} | Expr {
    $$ = new std::vector<vlang::ExprAST*>();
    $$->push_back($1);
}
| {
    $$ = new std::vector<vlang::ExprAST*>();
}
;

/* Making assignment list. */
Assignments: Assignments ',' Assignment {
    $$ = $1;
    $$->push_back(*$3);
    delete $3;
}
| Assignment {
    $$ = new std::vector<std::pair<std::string, vlang::ExprAST*>>();
    $$->push_back(*$1);
    delete $1;
};

/* What an assignment is. */
Assignment: id_tok '=' Expr {
    $$ = new std::pair<std::string, vlang::ExprAST*>(*$1, $3);
    delete $1;
}
| id_tok {
    $$ = new std::pair<std::string, vlang::ExprAST*>(*$1, nullptr);
    delete $1;
}

/* What kind of types are supported */
VlangType: int_ty_tok {
    $$ = vlang::VLANG_TYPE::INT32;
}
| double_ty_tok {
    $$ = vlang::VLANG_TYPE::DOUBLE;
}
| string_ty_tok {
    $$ = vlang::VLANG_TYPE::STRING;
}
| void_ty_tok {
    $$ = vlang::VLANG_TYPE::VOID;
}
| bool_ty_tok {
    $$ = vlang::VLANG_TYPE::BOOL;
}
/*
| error {
    syntax_error("Unrecognized type.");
}
*/
;

/* A chain of function arguments */
ArgList: ArgList ',' Arg {
    $$ = $1;
    $$->push_back(*$3);
    delete $3;
}
| Arg {
    $$ = new std::vector<std::pair<vlang::VLANG_TYPE, std::string>>();
    $$->push_back(*$1);
    delete $1;
}
| {
    $$ = new std::vector<std::pair<vlang::VLANG_TYPE, std::string>>();
}
;

/* A function argument */
Arg: VlangType id_tok {
    $$ = new std::pair<vlang::VLANG_TYPE, std::string>($1, *$2);
    vlang::RegisterVariable(*$2, $1);
    delete $2;
}

%%
extern FILE* yyin;
int main(int argc, char** argv) {
    /*yydebug = 1;*/
    vlang::util::ProgramOptions::get().init(argc, argv);
    vlang::BeginScope();

    // For now, we only support one file
    if (vlang::util::ProgramOptions::get().contains_input_files()) {
        std::string fileName = vlang::util::ProgramOptions::get().first_input_file();
        yyin = fopen(fileName.c_str(), "r");
        if (yyin == NULL) {
            std::cerr << "Failed reading '" << fileName << "'" << std::endl;
            return 1;
        }
    }
    std::cout << vlang::util::ProgramOptions::get().show_state() << std::endl;

    yyparse();
    fclose(yyin);


    // Show source if required
    if (vlang::util::ProgramOptions::get().emit_source()) {
        std::cout << std::endl << BOLDRED << DRAGON_SEPARATOR() << RESET << std::endl;
        std::cout << BOLDBLUE << "Parsed source:" << RESET << std::endl;
        std::cout << BOLDRED << DRAGON_SEPARATOR() << RESET << std::endl;
        for (auto &stmt : *ParsedProgram)
            std::cout << stmt->dump() << std::endl;
        std::cout << std::endl << std::endl;
    }

    // perform semantic analysis
    vlang::semant::SemanticAnalyzer semanticAnalyzer(ParsedProgram);
    ParsedProgram = semanticAnalyzer.performAnalysis();

    // perform llvm compilation
    InitializeNativeTarget();
    InitializeNativeTargetAsmPrinter();
    InitializeNativeTargetAsmParser();
    InitializeModuleAndPassManager();

    for (auto &miniast : *ParsedProgram) {
        miniast->codegen();
    }

    write_llvm_to_bitcode();

    if (vlang::util::ProgramOptions::get().emit_llvm()) {
        std::cout << std::endl << std::endl << BOLDRED << DRAGON_SEPARATOR() << RESET << std::endl;
        std::cout << BOLDBLUE << "LLVM IR:" << RESET << std::endl;
        std::cout << BOLDRED << DRAGON_SEPARATOR() << RESET << std::endl;
        TheModule->dump();
        std::cout << "\n; End of module" << std::endl;
    }


    for (auto &miniast : *ParsedProgram)
        delete miniast;
    delete ParsedProgram;


    TheModule.release();
    return 0;
}

